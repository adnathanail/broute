use crate::{rocket, RouteOptimisationResponse, ShortestPathResponse};
use rocket::http::Status;
use rocket::local::asynchronous::Client;

#[async_test]
async fn test_shortest_path_api() {
    let client = Client::tracked(rocket().await.unwrap())
        .await
        .expect("valid rocket instance");
    let response = client
        .get("/shortest_path/43.7284765/7.415138/43.7341524/7.4178794/")
        .dispatch()
        .await;
    assert_eq!(response.status(), Status::Ok);
    assert_eq!(
        response.into_json::<ShortestPathResponse>().await.unwrap(),
        ShortestPathResponse {
            from_point: (43.728444800000005, 7.4152383),
            to_point: (43.734151700000005, 7.417887500000001),
            path: vec![
                (43.728444800000005, 7.4152383),
                (43.7285819, 7.415576000000001),
                (43.7286046, 7.4155176),
                (43.7286323, 7.4154615),
                (43.7286662, 7.4154137),
                (43.728715900000005, 7.415354000000001),
                (43.728739700000006, 7.415338200000001),
                (43.7287594, 7.4153137),
                (43.7288147, 7.4153305),
                (43.728862500000005, 7.415350900000001),
                (43.7289017, 7.415383200000001),
                (43.7289371, 7.4154279),
                (43.729076600000006, 7.415619400000001),
                (43.7291025, 7.415654900000001),
                (43.7294739, 7.4161647),
                (43.729504000000006, 7.416191100000001),
                (43.7295388, 7.416202500000001),
                (43.7295743, 7.4161976),
                (43.7296066, 7.416176900000001),
                (43.7296315, 7.416215),
                (43.7296516, 7.416224400000001),
                (43.729808600000005, 7.4164455),
                (43.7298474, 7.4165207),
                (43.729922300000005, 7.4165397),
                (43.7299335, 7.416545),
                (43.730154600000006, 7.4168478),
                (43.7304678, 7.417278100000001),
                (43.7304887, 7.4172522),
                (43.730541800000005, 7.4173232),
                (43.730628200000005, 7.417332900000001),
                (43.730662300000006, 7.4173941),
                (43.7306755, 7.417417100000001),
                (43.7307094, 7.4174762),
                (43.7307476, 7.4174723),
                (43.730778400000005, 7.4174733),
                (43.7308223, 7.4174734),
                (43.730968100000005, 7.417465900000001),
                (43.7310821, 7.41746),
                (43.731207600000005, 7.417453500000001),
                (43.7313965, 7.417417),
                (43.731576800000006, 7.4173821),
                (43.7316068, 7.417510900000001),
                (43.7316437, 7.4176719),
                (43.7319109, 7.4172199),
                (43.7318999, 7.4172731),
                (43.732241300000005, 7.417548300000001),
                (43.732620100000005, 7.4178537),
                (43.7327129, 7.417826700000001),
                (43.732727, 7.417824),
                (43.7327358, 7.417829),
                (43.7327601, 7.4178429),
                (43.7328034, 7.4178696),
                (43.7328255, 7.417885600000001),
                (43.7328363, 7.4179034),
                (43.7328409, 7.417911),
                (43.732852, 7.4179249),
                (43.7328899, 7.417957400000001),
                (43.7330388, 7.4180511),
                (43.7330185, 7.4181385),
                (43.7330246, 7.418144600000001),
                (43.7331208, 7.418124000000001),
                (43.733220800000005, 7.4181027),
                (43.733364900000005, 7.418072700000001),
                (43.733474400000006, 7.4180486),
                (43.733576500000005, 7.4180269),
                (43.7336834, 7.4180041),
                (43.733760100000005, 7.417989),
                (43.7337775, 7.4181546),
                (43.7338251, 7.418147500000001),
                (43.7340816, 7.4180982),
                (43.734085400000005, 7.4181315),
                (43.734055600000005, 7.418137300000001),
                (43.7340517, 7.418098),
                (43.7340497, 7.4180524),
                (43.734057500000006, 7.4179827),
                (43.7340706, 7.417937),
                (43.7340967, 7.417902000000001),
                (43.734151700000005, 7.417887500000001)
            ],
            path_length: 0.8388698268789816
        }
    );
}

#[async_test]
async fn test_route_optimisation_api() {
    let client = Client::tracked(rocket().await.unwrap())
        .await
        .expect("valid rocket instance");
    let response = client
        .get("/route_optimisation/51.523283898620925,-0.14876604080200198%7C51.52169511505159,-0.14775753021240237%7C51.52102754239191,-0.1446032524108887%7C51.52393808750874,-0.143122673034668%7C51.52415169817137,-0.13750076293945315%7C51.523457459854065,-0.1336169242858887%7C51.5212411667077,-0.13121366500854495%7C51.51887789193976,-0.1326084136962891%7C51.52246948707708,-0.12533426284790042%7C51.52533988919283,-0.12640714645385745%7C51.52620764956154,-0.12958288192749026/")
        .dispatch()
        .await;
    assert_eq!(response.status(), Status::Ok);
    let total_path_length = response
        .into_json::<RouteOptimisationResponse>()
        .await
        .unwrap()
        .total_path_length;
    println!("Total path length: {total_path_length}");
    assert!(total_path_length < 8.0);
}
